/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/HiVStDzjj9w
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { auth, db } from "@/firebase/firebase-config";
import { useNavigate } from "@tanstack/react-router";
import { doc, getDoc, setDoc } from "firebase/firestore";
import { SubmitHandler, useForm } from "react-hook-form";

import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { signInAnonymously } from "firebase/auth";
import { useState } from "react";
import playerQuery from "@/firebase/queries/player";
import roomQuery from "@/firebase/queries/room";

type Inputs = {
  nickname: string;
  roomId: string;
};

export function JoinRoom() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();

  const [noRoomError, setNoRoomError] = useState(false);
  const navigate = useNavigate();

  const onSubmit: SubmitHandler<Inputs> = async ({ nickname, roomId }) => {
    const {
      user: { uid },
    } = await signInAnonymously(auth);

    const roomSnap = await getDoc(roomQuery(roomId));

    if (roomSnap.exists()) {
      await setDoc(playerQuery(roomId, uid), {
        user: uid,
        nickname: nickname,
      });
      navigate({ to: `/room/$roomId`, params: { roomId } });
    } else {
      // docSnap.data() will be undefined in this case
      setNoRoomError(true);
    }

    navigate({ to: `/room/$roomId`, params: { roomId } });
  };
  return (
    <div className="flex h-screen items-center justify-center">
      <form onSubmit={handleSubmit(onSubmit)}>
        <Card className="w-full max-w-lg">
          <CardHeader>
            <CardTitle className="text-2xl">Join a Game Room</CardTitle>
            <CardDescription>
              Enter your nickname to join a game room
            </CardDescription>
          </CardHeader>

          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="roomId">Room Code</Label>
              <Input
                {...register("roomId")}
                id="roomId"
                placeholder="Room code"
              />

              {errors.roomId && (
                <p className="text-xs text-red-500 dark:text-red-400">
                  This field is required.
                </p>
              )}
            </div>
            <div className="space-y-2">
              <Label htmlFor="nickname">Nickname</Label>
              <Input
                {...register("nickname")}
                id="nickname"
                placeholder="Enter your nickname"
              />

              {errors.nickname && (
                <p className="text-xs text-red-500 dark:text-red-400">
                  This field is required.
                </p>
              )}
            </div>
            <Button className="w-full">Create</Button>
            {noRoomError && (
              <p className="text-red-500 dark:text-red-400">
                Error: Room not found with this ID
              </p>
            )}
          </CardContent>
        </Card>
      </form>
    </div>
  );
}
